{"version":3,"sources":["components/jsonLocale.js","components/ConfigScreen.tsx","components/shared.tsx","components/Field.tsx","components/EntryEditor.tsx","index.tsx"],"names":["English","format","symbols","colon","comma","semicolon","slash","backslash","brackets","round","square","curly","angle","period","quotes","single","double","grave","space","ampersand","asterisk","at","equals","hash","percent","plus","minus","dash","hyphen","tilde","underscore","bar","types","key","value","number","string","primitive","boolean","character","integer","array","float","invalidToken","tokenSequence","prohibited","permitted","termSequence","useInstead","unexpected","brace","missingOpen","missingClose","cannotWrap","mustBeWrappedByQuotes","nonAlphanumeric","unexpectedKey","numberAndLetterMissingQuotes","spaceMissingQuotes","unexpectedString","noTrailingOrLeadingComma","Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","EditorInterface","onParamsChange","tabs","setState","error","fields","Array","isArray","length","console","log","this","getParameters","setReady","paramaters","Object","assign","className","css","margin","style","minWidth","placeholder","locale","onChange","jsObject","id","Component","getEntryURL","entry","entryId","sys","spaceId","Field","field","locales","type","label","instance","extendedField","getForLocale","default","fieldDetails","contentType","find","fieldEditorInterface","editor","editorInterface","controls","fieldId","widgetId","fieldSdk","settings","renderHeading","htmlFor","name","undefined","isInitiallyDisabled","renderField","Entry","tabNames","installation","useState","setTabs","currentTab","setCurrentTab","fieldValues","setFieldValues","inUse","map","globalFields","filter","tab","values","fieldIdx","reduce","keys","getValue","forEach","onValueChanged","newValue","extraFields","includes","testFieldValue","conditionField","config","condition","some","val","renderFieldEntry","push","extraField","spacing","role","withDivider","selected","onSelect","tabFields","typeField","show","title","linkLabel","url","image","renderDataField","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_EDITOR","EntryEditor","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.545b52f2.chunk.js","sourcesContent":["const English = {\n    format: \"{reason} at line {line}\",\n        symbols: {\n    colon: \"colon\",\n        // :\n        comma: \"comma\",\n        // ,  ،  、\n        semicolon: \"semicolon\",\n        // ;\n        slash: \"slash\",\n        // /  relevant for comment syntax support\n        backslash: \"backslash\",\n        // \\  relevant for escaping character\n        brackets: {\n        round: \"round brackets\",\n            // ( )\n            square: \"square brackets\",\n            // [ ]\n            curly: \"curly brackets\",\n            // { }\n            angle: \"angle brackets\" // < >\n\n    },\n    period: \"period\",\n        // . Also known as full point, full stop, or dot\n        quotes: {\n        single: \"single quote\",\n            // '\n            double: \"double quote\",\n            // \"\n            grave: \"grave accent\" // ` used on Javascript ES6 Syntax for String Templates\n\n    },\n    space: \"space\",\n        //       \n        ampersand: \"ampersand\",\n        //\t&\n        asterisk: \"asterisk\",\n        //\t*  relevant for some comment sytanx\n        at: \"at sign\",\n        //\t@  multiple uses in other coding languages including certain data types\n        equals: \"equals sign\",\n        //\t=\n        hash: \"hash\",\n        //\t#\n        percent: \"percent\",\n        //\t%\n        plus: \"plus\",\n        //\t+\n        minus: \"minus\",\n        //\t−\n        dash: \"dash\",\n        //\t−\n        hyphen: \"hyphen\",\n        //\t−\n        tilde: \"tilde\",\n        //\t~\n        underscore: \"underscore\",\n        //\t_\n        bar: \"vertical bar\" //\t|\n\n},\n    types: {\n        key: \"key\",\n            value: \"value\",\n            number: \"number\",\n            string: \"string\",\n            primitive: \"primitive\",\n            boolean: \"boolean\",\n            character: \"character\",\n            integer: \"integer\",\n            array: \"array\",\n            float: \"float\" //... Reference: https://en.wikipedia.org/wiki/List_of_data_structures\n\n    },\n    invalidToken: {\n        tokenSequence: {\n            prohibited: \"'{firstToken}' token cannot be followed by '{secondToken}' token(s)\",\n                permitted: \"'{firstToken}' token can only be followed by '{secondToken}' token(s)\"\n        },\n        termSequence: {\n            prohibited: \"A {firstTerm} cannot be followed by a {secondTerm}\",\n                permitted: \"A {firstTerm} can only be followed by a {secondTerm}\"\n        },\n        double: \"'{token}' token cannot be followed by another '{token}' token\",\n            useInstead: \"'{badToken}' token is not accepted. Use '{goodToken}' instead\",\n            unexpected: \"Unexpected '{token}' token found\"\n    },\n    brace: {\n        curly: {\n            missingOpen: \"Missing '{' open curly brace\",\n                missingClose: \"Open '{' curly brace is missing closing '}' curly brace\",\n                cannotWrap: \"'{token}' token cannot be wrapped in '{}' curly braces\"\n        },\n        square: {\n            missingOpen: \"Missing '[' open square brace\",\n                missingClose: \"Open '[' square brace is missing closing ']' square brace\",\n                cannotWrap: \"'{token}' token cannot be wrapped in '[]' square braces\"\n        }\n    },\n    string: {\n        missingOpen: \"Missing/invalid opening string '{quote}' token\",\n            missingClose: \"Missing/invalid closing string '{quote}' token\",\n            mustBeWrappedByQuotes: \"Strings must be wrapped by quotes\",\n            nonAlphanumeric: \"Non-alphanumeric token '{token}' is not allowed outside string notation\",\n            unexpectedKey: \"Unexpected key found at string position\"\n    },\n    key: {\n        numberAndLetterMissingQuotes: \"Key beginning with number and containing letters must be wrapped by quotes\",\n            spaceMissingQuotes: \"Key containing space must be wrapped by quotes\",\n            unexpectedString: \"Unexpected string found at key position\"\n    },\n    noTrailingOrLeadingComma: \"Trailing or leading commas in arrays and objects are not permitted\"\n};\n\nexport default English","import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, ValidationMessage } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from './jsonLocale';\n\nexport interface AppInstallationParameters {\n  tabs?: any;\n  fields?: any;\n}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n  error: string;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {}, error: '' };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { error: '', parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: {\n        EditorInterface: {\n          ...currentState?.EditorInterface\n        }\n\n      },\n    };\n  };\n\n  onParamsChange = async (value: any) => {\n    const state = this.state\n\n    if (!value.tabs) {\n      this.setState({\n        ...state,\n        error: `Tab is required.`\n      });\n      return\n    }\n\n    if (!value.fields) {\n      this.setState({\n        ...state,\n        error: `Fields is required.`\n      });\n      return\n    }\n\n\n    if (!Array.isArray(value.fields)) {\n      this.setState({\n        ...state,\n        error: `Value for fields must be array.`\n      });\n      return\n    }\n\n    if (!Array.isArray(value.tabs)) {\n      this.setState({\n        ...state,\n        error: `Value for tabs must be array.`\n      });\n      return\n    }\n\n    if (!value.tabs.length) {\n      this.setState({\n        ...state,\n        error: `There must be at least one tab.`\n      });\n      return\n    }\n\n    if (!value.fields.length) {\n      this.setState({\n        ...state,\n        error: `There must be at least one field.`\n      });\n      return\n    }\n\n    console.log(value)\n\n    this.setState({\n      ...state,\n      parameters: value\n    })\n  };\n\n  render() {\n    let {error, parameters} =  this.state\n    let paramaters = Object.assign({\n      tabs: [\n        'Content'\n      ],\n      fields: [\n        {\n          'field': 'content',\n          'tab': 'Content'\n        }\n      ]\n    }, parameters)\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form style={{minWidth: '40vw'}}>\n          <Heading>Configuration</Heading>\n\n          {\n            error ? (\n                <ValidationMessage>\n                  {error}\n                </ValidationMessage>\n            ) : null\n          }\n\n          <JSONInput placeholder={paramaters}  locale={locale} onChange={({jsObject, error}: any) => error ? \"\" : this.onParamsChange(jsObject)} id={\"tabs\"}/>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { Entry } from '@contentful/field-editor-shared';\nimport { EditorExtensionSDK } from '@contentful/app-sdk';\nimport { AppState, FieldType, FieldGroupType, Action } from './types';\n\n// UTILS\nexport const findUnassignedFields = (appState: AppState): FieldType[] => {\n    const assignedFields = appState.fieldGroups\n        .flatMap((fg: FieldGroupType) => fg.fields)\n        .reduce((acc: { [key: string]: boolean }, field: FieldType) => {\n            acc[field.id] = true;\n            return acc;\n        }, {});\n\n    return appState.fields.filter((f) => !assignedFields[f.id]);\n};\n\nexport const getEntryURL = (entry: Entry) => {\n    const entryId = entry.sys.id;\n    const spaceId = entry.sys.space.sys.id;\n\n    return `https://app.contentful.com/spaces/${spaceId}/entries/${entryId}`;\n};\n\nexport const SDKContext = React.createContext<EditorExtensionSDK>(undefined!);\nexport const AppContext = React.createContext<{\n    state: AppState;\n    dispatch: React.Dispatch<Action>;\n}>(undefined!);\n// non null statement here is to avoid having to continually assert context\n// throughout the code","import React from \"react\";\nimport 'codemirror/lib/codemirror.css';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/field-editor-date/styles/styles.css';\nimport {\n    Field as BaseField,\n    FieldWrapper,\n} from '@contentful/default-field-editors';\nimport { getEntryURL } from './shared';\nimport {FormLabel} from \"@contentful/forma-36-react-components\";\n\n/* @ts-ignore */\nimport {EditorExtensionSDK, EntryFieldAPI, FieldExtensionSDK, LocalesAPI} from \"@contentful/app-sdk\";\n/* @ts-ignore */\n\nimport {ButtonsField, QAndAField, AccentsField, RepeatableField} from '@MalalaFundDev/contentful-components'\n\ninterface FieldProps {\n    field: EntryFieldAPI;\n    locales: LocalesAPI;\n    sdk: EditorExtensionSDK;\n    type: any;\n    label: any;\n    instance: Object;\n}\n\nexport const Field: React.FC<FieldProps> = ({ field, locales, sdk, type, label, instance = {} }) => {\n    const extendedField = field.getForLocale(sdk.locales.default);\n    const fieldDetails = sdk.contentType.fields.find(({ id }) => id === extendedField.id);\n    const fieldEditorInterface = sdk.editor.editorInterface?.controls?.find(\n        ({ fieldId }) => fieldId === extendedField.id\n    );\n    const widgetId = fieldEditorInterface?.widgetId ?? '';\n\n    if (!fieldDetails || !fieldEditorInterface) {\n        return null;\n    }\n\n    const fieldSdk: FieldExtensionSDK = {\n        ...sdk,\n        field: extendedField,\n        locales,\n        parameters: {\n            ...sdk.parameters,\n            instance: {\n                ...sdk.parameters.instance,\n                ...instance,\n                ...fieldEditorInterface?.settings,\n            },\n        },\n    } as any;\n\n    const renderHeading = label ? () => {\n        return <FormLabel htmlFor={fieldDetails.name}>{label}</FormLabel>\n    } : undefined\n\n    const renderField = function() {\n        switch (type) {\n            case '39ArQsK2hqsWsIK0WiCGMm':\n            case 'accents':\n                return  <AccentsField sdk={fieldSdk}/>\n            case 'buttons':\n                return  <ButtonsField sdk={fieldSdk}/>\n            case 'q&a':\n                return <QAndAField sdk={fieldSdk}/>\n            case 'repeatable':\n                return <RepeatableField sdk={fieldSdk} />\n            default:\n                return <BaseField widgetId={widgetId} sdk={fieldSdk} isInitiallyDisabled={false} />\n        }\n    }\n\n    return  <FieldWrapper sdk={fieldSdk} name={fieldDetails.name} getEntryURL={getEntryURL} renderHeading={renderHeading}>\n        {renderField()}\n    </FieldWrapper>\n};","import React, {useState} from 'react';\n\nimport {\n    Tabs,\n    Tab,\n    Form,\n    Card\n} from '@contentful/forma-36-react-components';\nimport {EditorExtensionSDK, EntryFieldAPI} from '@contentful/app-sdk';\nimport {Field} from './Field'\n\ninterface EditorProps {\n    sdk: EditorExtensionSDK;\n}\n\ninterface FieldValues {\n    [key: string]: any\n}\n\nconst Entry = (props: EditorProps) => {\n    const {entry, locales, parameters} = props.sdk\n\n    // @ts-ignore\n    let tabNames = parameters.installation.tabs\n    let [tabs, setTabs] = useState([...tabNames])\n    let [currentTab, setCurrentTab] = useState('General')\n    let [fieldValues, setFieldValues] = useState<FieldValues>({})\n    // @ts-ignore\n    const fields = parameters.installation.fields;\n    let inUse: Array<string> = fields.map((field: any) => field.field)\n    const globalFields = fields.filter((field: any) => field.tab === \"\")\n\n    //Keep track of the field values in state so we can rerender on field change\n    if (!Object.values(fieldValues).length) {\n        let fieldIdx = 0\n        setFieldValues(Object.values(entry.fields).reduce((fields: FieldValues, field): FieldValues => {\n            fields[Object.keys(entry.fields)[fieldIdx]] = field.getValue()\n            fieldIdx++;\n            return fields\n        }, {}))\n\n        Object.values(entry.fields).forEach((field: EntryFieldAPI) => {\n            field.onValueChanged((newValue) => {\n                if (fieldValues[field.id] !== newValue) {\n                    fieldValues[field.id] = newValue\n                    setFieldValues(Object.assign({}, fieldValues))\n                }\n            })\n        })\n    }\n\n    let extraFields = Object.values(entry.fields).filter((field: EntryFieldAPI) => {\n        return !inUse.includes(field.id)\n    })\n\n    if (extraFields.length) {\n        tabNames.push('Other')\n        extraFields.forEach((extraField) => {\n            fields.push({\n                field: extraField.id,\n                tab: 'Other'\n            })\n        })\n    }\n\n\n    function renderFieldEntry(field: EntryFieldAPI, type: string | null = null, label: string | null = null, instance = {}) {\n        return <Field field={field} sdk={props.sdk} locales={locales} type={type} label={label} key={'field-' + field.id} instance={instance}/>\n    }\n\n    function testFieldValue(name: string, value: any) {\n        let conditionField: undefined|EntryFieldAPI = entry.fields[name]\n        if (!conditionField) {\n            return false\n        }\n        return conditionField.getValue() === value\n    }\n\n    function passesCondition(condition: any) {\n        let test\n        if (Array.isArray(condition.value)) {\n            test = condition.value.some((val: any) => testFieldValue(condition.field, val))\n        } else {\n            test = testFieldValue(condition.field, condition.value)\n        }\n        return test\n    }\n\n    function renderField(config: any) {\n        let field: undefined|EntryFieldAPI = entry.fields[config.field]\n        if (!field) {\n            return null\n        }\n        if (config.condition) {\n            if (!passesCondition(config.condition)) {\n                return null\n            }\n        }\n        // @ts-ignore\n        return renderFieldEntry(field, config.type, config.label)\n    }\n\n    function renderDataField(config: any) {\n        let typeField: undefined|EntryFieldAPI = entry.fields[\"type\"]\n        if (!typeField) {\n            return null\n        }\n\n        let show = false\n        switch(typeField.getValue()) {\n            case 'Q&A':\n                show = true\n                config['type'] = 'q&a'\n                config['label'] = 'Q&A'\n                break;\n            case 'Photo Stack':\n                show = true\n                config['type'] = 'repeatable'\n                config['label'] = 'Images'\n                config['instance'] = {\n                    title: true,\n                    linkLabel: true,\n                    url: true,\n                    image: true,\n                }\n                break;\n            default:\n        }\n        if (!show) {\n            return null\n        }\n        return renderField(config)\n    }\n\n    if (tabNames.length !== tabs.length) {\n        setTabs([...tabNames])\n    }\n\n\n    return <Form spacing=\"default\" className=\"f36-margin--2xl\">\n        <Card className={\"f36-padding--l f36-margin-bottom--l\"}>\n            {globalFields.map((field: any) => renderField(field))}\n        </Card>\n\n        <Tabs\n            role=\"navigation\"\n            withDivider\n        >\n            {\n                tabs.map((tab) => {\n                    return <Tab selected={currentTab === tab} id={tab} onSelect={() => setCurrentTab(tab)}\n                                key={\"tab-\" + tab}>\n                        {tab}\n                    </Tab>;\n                })\n            }\n        </Tabs>\n\n        {\n            tabs.map(tab => {\n                if (currentTab !== tab) {\n                    return null;\n                }\n                const tabFields = fields.filter((field: any) => field.tab === tab)\n                if (!tabFields.length) {\n                    return null;\n                }\n                return <Card className={\"f36-padding--l f36-margin-bottom--l\"} key={'tab-content' + tab}>\n                    {\n                        tabFields.map((field: any) => {\n                            if (field.field === 'data') {\n                                return renderDataField(field)\n                            }\n                            return renderField(field)\n                        })\n                    }\n                </Card>\n            })\n        }\n\n    </Form>;\n};\n\nexport default Entry;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  EditorExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport 'codemirror/lib/codemirror.css';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      }\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}